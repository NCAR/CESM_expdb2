#!/usr/bin/env perl
#
# processJSON - read a JSON file generated by archive_metadata and
# load it into the expdb2.0 database.
#
use strict;
use CGI;
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser warningsToBrowser); 
use CGI::Session qw/-ip-match/;
use CGI::Carp qw(set_die_handler);
use DBI;
use DBD::mysql;
use JSON qw( decode_json );
use Time::Piece;
use Time::Seconds;
use URI::Escape;

use lib qw(.);
use lib "/home/www/html/csegdb/lib";
use config;
use session;
use lib "/home/www/html/expdb2.0/lib";
use expdb2_0;

my $req = CGI->new;

my %item;
my $status;
my $count;
my $last_update;
my ($sql, $sth);
my ($sql1, $sth1);

# get the username, password and JSON data that has been posted to the form
my $user = $req->param('username');
my $password = $req->param('password');

my $data = uri_unescape($req->param('data'));
my $loginType = 'SVN';

##print STDERR '>>> username = ' . $user . '<<<<\n';
##print STDERR '>>> password = ' . $password . '<<<<\n';
##print STDERR '>>> data = ' . $data . '<<<<\n';

# Get the necessary config vars 
my %config = &getconfig;
my $version_id = $config{'version_id'};
my $dbname = $config{'dbname'};
my $dbhost = $config{'dbhost'};
my $dbuser = $config{'dbuser'};
my $dbpasswd = $config{'dbpassword'};
my $dsn = $config{'dsn'};

# check the authentication
my ($authsuccessful, $autherror) = &svn_authenticate($user, $password);
if(!$authsuccessful)
{
    # problem with the authorization so return a 401 error
    print $req->header('text/html', '401 SVN username/password incorrect!');
    die "401 - Unauthorized";
}

my @comps = qw(atm ice lnd ocn);
my %fields;
my $fields;
my $key = '';
my @keys = qw(casename caseroot caseuser compiler compset continue_run dout_l_ms 
              dout_l_msroot dout_s dout_s_root grid job_queue job_time machine model 
              model_cost model_throughput model_version mpilib postprocess project 
              rest_n rest_option run_dir run_refcase run_refdate run_startdate 
              run_type stop_n stop_option svn_repo_url title);

my $dbh = DBI->connect($dsn, $dbuser, $dbpasswd) or die "unable to connect to db: $DBI::errstr";
my $jsonObj = JSON->new->allow_nonref;
my $json = $jsonObj->decode($data);

# get all the data into a quotable format for the SQL calls
$fields{'casename'}         = $dbh->quote($json->{'CASE'});
$fields{'caseroot'}         = $dbh->quote($json->{'CASEROOT'});
$fields{'caseuser'}         = $dbh->quote($json->{'USER'});
$fields{'compiler'}         = $dbh->quote($json->{'COMPILER'});
$fields{'compset'}          = $dbh->quote($json->{'COMPSET'});
$fields{'continue_run'}     = $dbh->quote($json->{'CONTINUE_RUN'});
$fields{'dout_l_ms'}        = $dbh->quote($json->{'DOUT_L_MS'});
$fields{'dout_l_msroot'}    = $dbh->quote($json->{'DOUT_L_MSROOT'});
$fields{'dout_s'}           = $dbh->quote($json->{'DOUT_S'});
$fields{'dout_s_root'}      = $dbh->quote($json->{'DOUT_S_ROOT'});
$fields{'expType'}          = $dbh->quote($json->{'expType'});
$fields{'grid'}             = $dbh->quote($json->{'GRID'});
$fields{'job_queue'}        = $dbh->quote($json->{'JOB_QUEUE'});
$fields{'job_time'}         = $dbh->quote($json->{'JOB_WALLCLOCK_TIME'});
$fields{'machine'}          = $dbh->quote($json->{'MACH'});
$fields{'model'}            = $dbh->quote($json->{'MODEL'});
$fields{'model_cost'}       = $dbh->quote($json->{'model_cost'});
$fields{'model_throughput'} = $dbh->quote($json->{'model_throughput'});
$fields{'model_version'}    = $dbh->quote($json->{'MODEL_VERSION'});
$fields{'mpilib'}           = $dbh->quote($json->{'MPILIB'});
$fields{'postprocess'}      = $dbh->quote($json->{'postprocess'});
$fields{'project'}          = $dbh->quote($json->{'PROJECT'});
$fields{'rest_n'}           = $dbh->quote($json->{'REST_N'});
$fields{'rest_option'}      = $dbh->quote($json->{'REST_OPTION'});
$fields{'run_dir'}          = $dbh->quote($json->{'RUNDIR'});
$fields{'run_lastdate'}     = $dbh->quote($json->{'run_lastdate'});
$fields{'run_refcase'}      = $dbh->quote($json->{'RUN_REFCASE'});
$fields{'run_refdate'}      = $dbh->quote($json->{'RUN_REFDATE'});
$fields{'run_startdate'}    = $dbh->quote($json->{'RUN_STARTDATE'});
$fields{'run_type'}         = $dbh->quote($json->{'RUN_TYPE'});
$fields{'stop_n'}           = $dbh->quote($json->{'STOP_N'});
$fields{'stop_option'}      = $dbh->quote($json->{'STOP_OPTION'});
$fields{'svn_repo_url'}     = $dbh->quote($json->{'svn_repo_url'});
$fields{'svnlogin'}         = $dbh->quote($json->{'svnlogin'});
$fields{'title'}            = $dbh->quote($json->{'title'});
my $svnlogin = $dbh->quote($json->{'svnlogin'});

# get the svnuser id 
$sql = qq(select user_id from t_svnusers where svnlogin = $fields{'svnlogin'});
$sth = $dbh->prepare($sql);
$sth->execute() or die $dbh->errstr;
($item{user_id}) = $sth->fetchrow;
$sth->finish();
if (length($item{user_id}) < 1) {
    die "Error in $sql - no SVN user found";
}

# get the exp id based on the case name
($count, $item{case_id}) = checkCase($dbh, $json->{'CASE'});

my $action = "insert";
if ($count == 1) {
    $action = "update";
}

# get the expType id
$sql = qq(select id from t2_expType where name = $fields{'expType'});
$sth = $dbh->prepare($sql);
$sth->execute() or die $dbh->errstr;
($item{expType_id}) = $sth->fetchrow;
$sth->finish();
if (length($item{expType_id}) < 1) {
    die "Error in $sql - no expType found";
}

my %status;
# get the status table into a hash
$sql = qq(select id, code from t2_status);
$sth = $dbh->prepare($sql);
$sth->execute() or die $dbh->errstr;
while( my $ref = $sth->fetchrow_hashref() ) {
    $status{$ref->{'id'}} = $ref->{'code'};
}
$sth->finish();

if ($action eq "insert") {
    # load up an sql insert statement
    $sql = qq(insert into t2_cases
              (casename, caseroot, caseuser, compiler, compset, continue_run, dout_l_ms, dout_l_msroot, 
               dout_s, dout_s_root, grid,
               job_queue, job_time, machine, model, model_cost, model_throughput,  model_version, mpilib, 
               postprocess, project,
               rest_n, rest_option, run_dir, run_lastdate, run_refcase, run_refdate, run_startdate, 
               run_type, stop_n, stop_option, svn_repo_url, title, archive_date) value
              ($fields{'casename'}, $fields{'caseroot'}, $fields{'caseuser'}, $fields{'compiler'}, 
               $fields{'compset'}, $fields{'continue_run'}, $fields{'dout_l_ms'}, $fields{'dout_l_msroot'},
               $fields{'dout_s'}, $fields{'dout_s_root'}, $fields{'grid'},
               $fields{'job_queue'}, $fields{'job_time'}, $fields{'machine'}, $fields{'model'}, 
               $fields{'model_cost'}, $fields{'model_throughput'}, 
               $fields{'model_version'}, $fields{'mpilib'}, $fields{'postprocess'}, $fields{'project'},
               $fields{'rest_n'}, $fields{'rest_option'}, $fields{'run_dir'}, 
               $fields{'run_lastdate'}, $fields{'run_refcase'}, $fields{'run_refdate'},
               $fields{'run_startdate'}, $fields{'run_type'}, $fields{'stop_n'}, 
               $fields{'stop_option'}, $fields{'svn_repo_url'}, $fields{'title'}, NOW()));
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();

    # get the id of the case just inserted
    $sql = qq(select id from t2_cases where casename = $fields{'casename'});
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    ($item{case_id}) = $sth->fetchrow;
    $sth->finish();
    if (length($item{case_id}) < 1) {
	die "Error in $sql - no experiment found";
    }

    # update the record just loaded
    $sql = qq(update t2_cases set 
              expType_id = $item{expType_id},
              svnuser_id = $item{user_id}
              where id = $item{case_id});
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();

    # load the process statuses into the t2j_status join table
    my %proc_stat;
    $sql = qq(select id, name from t2_process);
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    while( my $ref = $sth->fetchrow_hashref() ) 
    {
	if ( exists $json->{$ref->{'name'}} ) 
	{
	    foreach my $statid (keys %status) 
	    {
		if ($status{$statid} eq $json->{$ref->{'name'}}) 
		{
		    $sql1 = qq(insert into t2j_status (case_id, status_id, process_id, last_update)
                              value ($item{case_id}, $statid, $ref->{'id'}, NOW()));
		    $sth1 = $dbh->prepare($sql1);
		    $sth1->execute() or die $dbh->errstr;
		    $sth1->finish();
		}
	    }
	}
    }
    $sth->finish();
}
else {
    # check the new fields against the existing fields add to t2e_fields table if necessary
    foreach my $field (@keys) {
	$status = 'nochange';

	# first check if the field has changed from the t2_cases original
	$sql = qq(select "change" from t2_cases  where 
                  $field != $fields{$field} and id = $item{case_id});
	$sth = $dbh->prepare($sql);
	$sth->execute() or die $dbh->errstr;
	my $returnstatus1 = $sth->fetchrow;
	$sth->finish();

	# next check if the field has changed from the last update in the t2e_fields table
	$sql = qq(select "change" from t2e_fields where 
                  field_name = '$field' and field_value != $fields{$field} and
                  case_id = $item{case_id} order by last_update desc);
	$sth = $dbh->prepare($sql);
	$sth->execute() or die $dbh->errstr;
	my $returnstatus2 = $sth->fetchrow;
	$sth->finish();

	if (length($returnstatus1) > 1 || length($returnstatus2) > 1) {
	    $status = "change";
	}

	if ($status eq "change") {
	    $count = 0;
	    $sql = qq(select count(*), last_update from t2e_fields where 
                          field_name = '$field' and field_value = $fields{$field} and
                          case_id = $item{case_id} order by last_update desc);
	    $sth = $dbh->prepare($sql);
	    $sth->execute() or die $dbh->errstr;
	    ($count, $last_update) = $sth->fetchrow;
	    $sth->finish();

	    if (!$count) {
		$sql = qq(insert into t2e_fields (case_id, field_name, field_value, last_update)
                              value ($item{case_id}, '$field', $fields{$field}, NOW()));
		$sth = $dbh->prepare($sql);
		$sth->execute() or die $dbh->errstr;
		$sth->finish();
	    }
	}
    }

    # update the status join table
    my %proc_stat;
    $sql = qq(select id, name from t2_process);
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    while( my $ref = $sth->fetchrow_hashref() ) 
    {
	if ( exists $json->{$ref->{'name'}} ) 
	{
	    foreach my $statid (keys %status) 
	    {
		if ($status{$statid} eq $json->{$ref->{'name'}}) 
		{
		    $sql1 = qq(update t2j_status set status_id=$statid, last_update=NOW()
                               where case_id=$item{case_id} and process_id=$ref->{'id'});
		    $sth1 = $dbh->prepare($sql1);
		    $sth1->execute() or die $dbh->errstr;
		    $sth1->finish();
		}
	    }
	}
    }
    $sth->finish();
    

}

print $req->header;
exit 0;


