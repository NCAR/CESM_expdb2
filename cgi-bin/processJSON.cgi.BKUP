#!/usr/bin/env perl
#
# processJSON - read a JSON file generated by archive_metadata and
# load it into the expdb2.0 database.
#
use strict;
use CGI;
use DBI;
use DBD::mysql;
use CGI::Session qw/-ip-match/;
use CGI::Carp qw(set_die_handler );
use JSON qw( decode_json );
use URI::Escape;

use lib qw(.);
use lib "/home/www/html/csegdb/lib";
use config;
use session;
use lib "/home/www/html/expdb2.0/lib";
use expdb2_0;

my $req = CGI->new;

my %item;
my $status;
my $count;
my $last_update;
my ($sql, $sth);

# get the username, password and JSON data that has been posted to the form
my $user = $req->param('username');
my $password = $req->param('password');
my $data = uri_unescape($req->param('data'));
my $loginType = 'SVN';

##print STDERR '>>> username = ' . $user . '<<<<\n';
##print STDERR '>>> password = ' . $password . '<<<<\n';
##print STDERR '>>> data = ' . $data . '<<<<\n';

# Get the necessary config vars 
my %config = &getconfig;
my $version_id = $config{'version_id'};
my $dbname = $config{'dbname'};
my $dbhost = $config{'dbhost'};
my $dbuser = $config{'dbuser'};
my $dbpasswd = $config{'dbpassword'};
my $dsn = $config{'dsn'};

# check the authentication
my ($authsuccessful, $autherror) = &svn_authenticate($user, $password);
if(!$authsuccessful)
{
# problem with the authorization so return a 401 error
    print $req->header('text/html', '401 SVN username/password incorrect!');
    die "401 - Unauthorized";
}

my %fields;
my @keys = qw(casename caseroot caseuser compiler compset continue_run 
              dout_s_root grid job_queue job_time machine model 
              model_version mpilib project rest_n rest_option run_dir 
              run_refcase run_refdate run_startdate run_type stop_n 
              stop_option svn_repo_url title);

# status messages mapping to t2_status id fields 
my %run_msgs = {
    4 => 'Model did not complete',
    3 => 'Run started',
    5 => 'Run FAILED',
    2 => 'Run SUCCESSFUL'
};
my %sta_msgs = {
    3 => 'st_archiving starting',
    2 => 'st_archiving completed'
};
my %lta_msgs = {
    3 => 'lt_archiving starting',
    2 => 'lt_archiving completed'
};

my $dbh = DBI->connect($dsn, $dbuser, $dbpasswd) or die "unable to connect to db: $DBI::errstr";
my $jsonObj = JSON->new->allow_nonref;
my $json = $jsonObj->decode($data);

# get all the data into a quotable format for the SQL calls
$fields{'casename'}      = $dbh->quote($json->{'CASE'});
$fields{'caseroot'}      = $dbh->quote($json->{'CASEROOT'});
$fields{'caseuser'}      = $dbh->quote($json->{'USER'});
$fields{'compiler'}      = $dbh->quote($json->{'COMPILER'});
$fields{'compset'}       = $dbh->quote($json->{'COMPSET'});
$fields{'continue_run'}  = $dbh->quote($json->{'CONTINUE_RUN'});
$fields{'dout_s_root'}   = $dbh->quote($json->{'DOUT_S_ROOT'});
$fields{'expType'}       = $dbh->quote($json->{'expType'});
$fields{'grid'}          = $dbh->quote($json->{'GRID'});
$fields{'job_queue'}     = $dbh->quote($json->{'JOB_QUEUE'});
$fields{'job_time'}      = $dbh->quote($json->{'JOB_WALLCLOCK_TIME'});
$fields{'lta_status'}    = $dbh->quote($json->{'lta_status'});
$fields{'machine'}       = $dbh->quote($json->{'MACH'});
$fields{'model'}         = $dbh->quote($json->{'MODEL'});
$fields{'model_version'} = $dbh->quote($json->{'MODEL_VERSION'});
$fields{'mpilib'}        = $dbh->quote($json->{'MPILIB'});
$fields{'project'}       = $dbh->quote($json->{'PROJECT'});
$fields{'rest_n'}        = $dbh->quote($json->{'REST_N'});
$fields{'rest_option'}   = $dbh->quote($json->{'REST_OPTION'});
$fields{'run_dir'}       = $dbh->quote($json->{'RUNDIR'});
$fields{'run_lastdate'}  = $dbh->quote($json->{'run_lastdate'});
$fields{'run_refcase'}   = $dbh->quote($json->{'RUN_REFCASE'});
$fields{'run_refdate'}   = $dbh->quote($json->{'RUN_REFDATE'});
$fields{'run_startdate'} = $dbh->quote($json->{'RUN_STARTDATE'});
$fields{'run_status'}    = $dbh->quote($json->{'run_status'});
$fields{'run_type'}      = $dbh->quote($json->{'RUN_TYPE'});
$fields{'sta_status'}    = $dbh->quote($json->{'sta_status'});
$fields{'stop_n'}        = $dbh->quote($json->{'STOP_N'});
$fields{'stop_option'}   = $dbh->quote($json->{'STOP_OPTION'});
$fields{'svn_repo_url'}  = $dbh->quote($json->{'svn_repo_url'});
$fields{'svnlogin'}      = $dbh->quote($json->{'svnlogin'});
$fields{'title'}         = $dbh->quote($json->{'title'});

## for testing
##my $svnlogin = $dbh->quote('aliceb@ucar.edu');

# get the exp id based on the case name
#START HERE....
($count, $item{exp_id}) = checkCase($dbh, $json->{'casename'});

my $action = "insert";
if ($count == 1) {
    $action = "update";
}

# get the expType id
$sql = qq(select id from t2_expType where name = $fields{'expType'});
$sth = $dbh->prepare($sql);
$sth->execute() or die $dbh->errstr;
($item{expType_id}) = $sth->fetchrow;
$sth->finish();
if (length($item{expType_id}) < 1) {
    die "Error in $sql - no expType found";
}

# get the svnuser id 
$sql = qq(select user_id from t_svnusers where svnlogin = $fields{'svnlogin'});
$sth = $dbh->prepare($sql);
$sth->execute() or die $dbh->errstr;
($item{user_id}) = $sth->fetchrow;
$sth->finish();
if (length($item{user_id}) < 1) {
    die "Error in $sql - no SVN user found";
}

# setup the status ids
my $run_status_id = 1;
my $sta_status_id = 1;
my $lta_status_id = 1;

# match the run status id with the run msg
foreach my $key (keys %run_msgs)
{
    if ($run_msgs{$key} eq $fields{'run_status'}) {
	$run_status_id = $key;
    }
}

# match the sta status id with the sta msg
foreach my $key (keys %sta_msgs)
{
    if ($sta_msgs{$key} eq $fields{'sta_status'}) {
	$sta_status_id = $key;
    }
}

# match the lta status id with the lta msg
foreach my $key (keys %run_msgs)
{
    if ($lta_msgs{$key} eq $fields{'lta_status'}) {
	$lta_status_id = $key;
    }
}

if ($action eq "insert") {
    # load up an sql insert statement
    $sql = qq(insert into t2_cases
              (casename, caseroot, caseuser, compiler, compset, continue_run, dout_s_root, grid,
               job_queue, job_time, machine, model, model_version, mpilib, project,
               rest_n, rest_option, run_dir, run_lastdate, run_refcase, run_refdate, run_startdate, 
               run_type, stop_n, stop_option, svn_repo_url, title, archive_date) value
              ($fields{'casename'}, $fields{'caseroot'}, $fields{'caseuser'}, $fields{'compiler'}, 
               $fields{'compset'}, $fields{'continue_run'}, $fields{'dout_s_root'}, $fields{'grid'},
               $fields{'job_queue'}, $fields{'job_time'}, $fields{'machine'}, $fields{'model'}, 
               $fields{'model_version'}, $fields{'mpilib'}, $fields{'project'},
               $fields{'rest_n'}, $fields{'rest_option'}, $fields{'run_dir'}, 
               $fields{'run_lastdate'}, $fields{'run_refcase'}, $fields{'run_refdate'},
               $fields{'run_startdate'}, $fields{'run_type'}, $fields{'stop_n'}, 
               $fields{'stop_option'}, $fields{'svn_repo_url'}, $fields{'title'}, NOW()));
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();

    # get the id of the case just inserted
    $sql = qq(select id from t2_cases where casename = $fields{'casename'});
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    ($item{exp_id}) = $sth->fetchrow;
    $sth->finish();
    if (length($item{exp_id}) < 1) {
	die "Error in $sql - no experiment found";
    }

    # update the record just loaded
    $sql = qq(update t2_cases set 
              expType_id = $item{expType_id},
              svnuser_id = $item{user_id}
              where id = $item{exp_id});
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();

    # insert into the status join table

    $sql = qq(insert into t2j_status (case_id, status_id, process_id, last_update)
              values ($item{exp_id}, $run_status_id, 1, NOW()),
                     ($item{exp_id}, $sta_status_id, 2, NOW()),
                     ($item{exp_id}, $lta_status_id, 3, NOW()));
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();
}
else {
    # check the new fields against the existing fields add to t2e_fields table if necessary
    foreach my $field (@keys) {
	$status = 'nochange';

	# first check if the field has changed from the t2_cases original
	$sql = qq(select "change" from t2_cases  where 
                  $field != $fields{$field} and id = $item{exp_id});
	print STDERR '>>> sql = ' . $sql . '<<<<\n';
	$sth = $dbh->prepare($sql);
	$sth->execute() or die $dbh->errstr;
	my $returnstatus1 = $sth->fetchrow;
	$sth->finish();
	print STDERR '>>> returnstatus1 = ' . $returnstatus1 . '<<<<\n';

	# next check if the field has changed from the last update in the t2e_fields table
	$sql = qq(select "change" from t2e_fields where 
                  field_name = '$field' and field_value != $fields{$field} and
                  case_id = $item{exp_id} order by last_update desc);
	$sth = $dbh->prepare($sql);
	$sth->execute() or die $dbh->errstr;
	my $returnstatus2 = $sth->fetchrow;
	$sth->finish();
	print STDERR '>>> returnstatus2 = ' . $returnstatus2 . '<<<<\n';

	if (length($returnstatus1) > 1 || length($returnstatus2) > 1) {
	    $status = "change";
	}


	if ($status eq "change") {
	    $count = 0;
	    $sql = qq(select count(*), last_update from t2e_fields where 
                          field_name = '$field' and field_value = $fields{$field} and
                          case_id = $item{exp_id} order by last_update desc);
	    $sth = $dbh->prepare($sql);
	    $sth->execute() or die $dbh->errstr;
	    ($count, $last_update) = $sth->fetchrow;
	    $sth->finish();

	    if (!$count) {
		$sql = qq(insert into t2e_fields (case_id, field_name, field_value, last_update)
                              value ($item{exp_id}, '$field', $fields{$field}, NOW()));
		$sth = $dbh->prepare($sql);
		$sth->execute() or die $dbh->errstr;
		$sth->finish();
	    }
	}
    }

    # insert into the status join table
    my $run_status_id = 1;
    my $sta_status_id = 1;
    my $lta_status_id = 1;

    # match the run status id with the run msg
    foreach my $key (keys %run_msgs)
    {
	if ($run_msgs{$key} eq $fields{'run_status'}) {
	    $run_status_id = $key;
	}
    }

    # match the sta status id with the sta msg
    foreach my $key (keys %sta_msgs)
    {
	if ($sta_msgs{$key} eq $fields{'sta_status'}) {
	    $sta_status_id = $key;
	}
    }

    # match the lta status id with the lta msg
    foreach my $key (keys %run_msgs)
    {
	if ($lta_msgs{$key} eq $fields{'lta_status'}) {
	    $lta_status_id = $key;
	}
    }

    $sql = qq(update t2j_status set status_id = $run_status_id, last_update = NOW()
              where case_id = $item{exp_id} and process_id = 1);
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();

    $sql = qq(update t2j_status set status_id = $sta_status_id, last_update = NOW()
              where case_id = $item{exp_id} and process_id = 2);
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();

    $sql = qq(update t2j_status set status_id = $lta_status_id, last_update = NOW()
              where case_id = $item{exp_id} and process_id = 3);
    $sth = $dbh->prepare($sql);
    $sth->execute() or die $dbh->errstr;
    $sth->finish();
}

print $req->header;
exit 0;


